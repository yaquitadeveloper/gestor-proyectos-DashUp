---
// src/components/LoginInterface.astro
---

<!-- Modal de Login -->
<div id="login-modal" class="modal-overlay" style="display: none;">
  <div class="modal-content glass-effect rounded-xl p-8 shadow-2xl w-full max-w-md">
      <div class="flex justify-between items-center mb-6">
          <h2 class="text-white text-2xl font-semibold">Iniciar Sesión</h2>
          <button id="close-login-modal" class="text-white/70 hover:text-white text-2xl cursor-pointer">×</button>
      </div>
      
      <form id="login-form" class="space-y-6">
          <!-- Email field -->
          <div>
              <input 
                  type="email" 
                  name="email"
                  placeholder="Email" 
                  class="input-field w-full text-white pb-2 text-lg"
                  required
              >
          </div>
          
          <!-- Password field -->
          <div>
              <input 
                  type="password" 
                  name="password"
                  placeholder="Password" 
                  class="input-field w-full text-white pb-2 text-lg"
                  required
              >
          </div>
          
          <!-- Sign In button -->
          <button 
              type="submit" 
              class="sign-in-btn w-full py-3 rounded-lg text-white font-medium text-lg"
          >
              Iniciar Sesión
          </button>
          
          <!-- Divider -->
          <div class="flex items-center my-6">
              <div class="flex-1 h-px bg-white/20"></div>
              <span class="px-4 text-white/60 text-sm">o</span>
              <div class="flex-1 h-px bg-white/20"></div>
          </div>
          
          <!-- Google sign in -->
          <button 
              type="button" 
              id="google-login-btn"
              class="google-btn w-full py-3 rounded-lg font-medium text-lg flex items-center justify-center space-x-3"
          >
              <!-- Google icon -->
              <svg class="w-5 h-5" viewBox="0 0 24 24">
                  <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                  <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                  <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                  <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
              </svg>
              <span>Continuar con Google</span>
          </button>
      </form>
      
      <!-- Link to signup -->
      <div class="text-center mt-6">
          <span class="text-white/70">¿No tienes cuenta? </span>
          <button 
              id="switch-to-signup" 
              type="button"
              class="text-white hover:text-white/90 underline font-medium bg-transparent border-none cursor-pointer"
          >
              Regístrate
          </button>
      </div>
  </div>
</div>

<!-- Modal de Registro -->
<div id="signup-modal" class="modal-overlay" style="display: none;">
  <div class="modal-content glass-effect rounded-xl p-8 shadow-2xl w-full max-w-md">
      <div class="flex justify-between items-center mb-6">
          <h2 class="text-white text-2xl font-semibold">Crear Cuenta</h2>
          <button id="close-signup-modal" class="text-white/70 hover:text-white text-2xl cursor-pointer">×</button>
      </div>
      
      <form id="signup-form" class="space-y-6">
          <!-- Name field -->
          <div>
              <input 
                  type="text" 
                  name="name"
                  placeholder="Nombre" 
                  class="input-field w-full text-white pb-2 text-lg"
                  required
              >
          </div>
          
          <!-- Email field -->
          <div>
              <input 
                  type="email" 
                  name="email"
                  placeholder="Email" 
                  class="input-field w-full text-white pb-2 text-lg"
                  required
              >
          </div>
          
          <!-- Password field -->
          <div>
              <input 
                  type="password" 
                  name="password"
                  placeholder="Password" 
                  class="input-field w-full text-white pb-2 text-lg"
                  required
              >
          </div>
          
          <!-- Sign Up button -->
          <button 
              type="submit" 
              class="sign-in-btn w-full py-3 rounded-lg text-white font-medium text-lg"
          >
              Crear Cuenta
          </button>
          
          <!-- Divider -->
          <div class="flex items-center my-6">
              <div class="flex-1 h-px bg-white/20"></div>
              <span class="px-4 text-white/60 text-sm">o</span>
              <div class="flex-1 h-px bg-white/20"></div>
          </div>
          
          <!-- Google sign up -->
          <button 
              type="button" 
              id="google-signup-btn"
              class="google-btn w-full py-3 rounded-lg font-medium text-lg flex items-center justify-center space-x-3"
          >
              <!-- Google icon -->
              <svg class="w-5 h-5" viewBox="0 0 24 24">
                  <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                  <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                  <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                  <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
              </svg>
              <span>Continuar con Google</span>
          </button>
      </form>
      
      <!-- Link to login -->
      <div class="text-center mt-6">
          <span class="text-white/70">¿Ya tienes cuenta? </span>
          <button 
              id="switch-to-login" 
              type="button"
              class="text-white hover:text-white/90 underline font-medium bg-transparent border-none cursor-pointer"
          >
              Inicia Sesión
          </button>
      </div>
  </div>
</div>

<script>
// Importamos las funciones y servicios de Firebase
import { auth, db } from "../lib/firebase"; 
import { createUserWithEmailAndPassword, signInWithEmailAndPassword, GoogleAuthProvider, signInWithPopup } from "firebase/auth";
import { doc, setDoc, getDoc } from "firebase/firestore";

// Función de manejo del login
const loginHandler = async (e: Event) => {
  e.preventDefault();
  const form = e.currentTarget as HTMLFormElement;
  const formData = new FormData(form);
  
  const email = formData.get("email") as string;
  const password = formData.get("password") as string;

  if (!email || !password) {
    alert("Por favor, completa todos los campos.");
    return;
  }

  try {
    const userCredential = await signInWithEmailAndPassword(auth, email, password);
    console.log("Login exitoso:", userCredential.user);
    alert("¡Inicio de sesión exitoso!");
    window.location.href = "/dashboard";
  } catch (error: any) {
    console.error("Error de inicio de sesión:", error.code, error.message);
    let errorMessage = "Ocurrió un error inesperado.";
    if (error.code === "auth/user-not-found") {
      errorMessage = "No existe una cuenta con este correo electrónico.";
    } else if (error.code === "auth/wrong-password") {
      errorMessage = "Contraseña incorrecta.";
    } else if (error.code === "auth/invalid-email") {
      errorMessage = "El correo electrónico no es válido.";
    }
    alert(errorMessage);
  }
};

// Función de manejo del registro de usuario
const signupHandler = async (e: Event) => {
  e.preventDefault();
  const form = e.currentTarget as HTMLFormElement;
  const formData = new FormData(form);
  
  const email = formData.get("email") as string;
  const password = formData.get("password") as string;
  const name = formData.get("name") as string;

  if (!email || !password || !name) {
    alert("Por favor, completa todos los campos.");
    return;
  }

  try {
    console.log("Iniciando registro para:", email);
    
    // 1. Crear usuario en Firebase Auth
    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    const user = userCredential.user;
    
    console.log("Usuario creado en Auth:", user.uid);

    // 2. Crear documento en Firestore
    const userDocRef = doc(db, "users", user.uid);
    const userData = {
      name: name,
      email: email,
      role: "normal",
      createdAt: new Date().toISOString(),
      activeBoardIds: [],
      uid: user.uid
    };

    console.log("Guardando datos en Firestore:", userData);
    
    await setDoc(userDocRef, userData);
    console.log("Documento guardado exitosamente en Firestore");

    // 3. Verificar que se guardó correctamente
    const docSnap = await getDoc(userDocRef);
    if (docSnap.exists()) {
      console.log("Documento verificado en Firestore:", docSnap.data());
    } else {
      console.error("El documento no se guardó correctamente");
    }

    alert("¡Registro exitoso! Ya puedes iniciar sesión.");
    // Cierra el modal y redirige
    const modal = document.getElementById('signup-modal');
    if (modal) {
      modal.classList.remove('is-active');
      modal.style.display = 'none';
    }
    window.location.href = "/dashboard";

  } catch (error: any) {
    console.error("Error completo de registro:", error);
    console.error("Código de error:", error.code);
    console.error("Mensaje de error:", error.message);
    
    let errorMessage = "Ocurrió un error inesperado.";
    if (error.code === "auth/email-already-in-use") {
      errorMessage = "El correo electrónico ya está en uso.";
    } else if (error.code === "auth/weak-password") {
      errorMessage = "La contraseña es muy débil.";
    } else if (error.code === "permission-denied") {
      errorMessage = "Error de permisos en la base de datos. Contacta al administrador.";
    } else if (error.code === "unavailable") {
      errorMessage = "Servicio no disponible. Intenta más tarde.";
    }
    alert(errorMessage);
  }
};

// Función para Google Sign In
const googleSignInHandler = async () => {
  const provider = new GoogleAuthProvider();
  
  try {
    console.log("Iniciando login con Google");
    const result = await signInWithPopup(auth, provider);
    const user = result.user;
    
    console.log("Usuario de Google:", user);
    
    // Verificar si es un nuevo usuario y crear documento si es necesario
    const userDocRef = doc(db, "users", user.uid);
    const docSnap = await getDoc(userDocRef);
    
    if (!docSnap.exists()) {
      console.log("Usuario nuevo, creando documento en Firestore");
      const userData = {
        name: user.displayName || "Usuario",
        email: user.email,
        role: "normal",
        createdAt: new Date().toISOString(),
        activeBoardIds: [],
        uid: user.uid
      };
      
      await setDoc(userDocRef, userData);
      console.log("Documento de Google guardado en Firestore");
    } else {
      console.log("Usuario existente, documento ya existe");
    }

    alert("¡Inicio de sesión con Google exitoso!");
    window.location.href = "/dashboard";
  } catch (error: any) {
    console.error("Error con Google Sign In:", error.code, error.message);
    alert("Error al iniciar sesión con Google.");
  }
};

// Función para cambiar entre modales
const switchModal = (fromModal: string, toModal: string) => {
  const from = document.getElementById(fromModal);
  const to = document.getElementById(toModal);
  if (from && to) {
    from.classList.remove('is-active');
    from.style.display = 'none';
    to.style.display = 'flex';
    to.classList.add('is-active');
  }
};

// Función para inicializar los event listeners
const initializeModals = () => {
  console.log("Inicializando modales...");
  
  // Elementos de los modales
  const loginModal = document.getElementById('login-modal');
  const signupModal = document.getElementById('signup-modal');
  
  // Botones para abrir modales (desde header y footer)
  const openLoginBtns = document.querySelectorAll('#open-login-modal');
  const openSignupBtns = document.querySelectorAll('#open-signup-modal');
  
  // Botones para cerrar modales
  const closeLoginBtn = document.getElementById('close-login-modal');
  const closeSignupBtn = document.getElementById('close-signup-modal');
  
  // Botones para cambiar entre modales
  const switchToSignupBtn = document.getElementById('switch-to-signup');
  const switchToLoginBtn = document.getElementById('switch-to-login');
  
  // Formularios
  const loginForm = document.getElementById('login-form');
  const signupForm = document.getElementById('signup-form');
  
  // Botones de Google
  const googleLoginBtn = document.getElementById('google-login-btn');
  const googleSignupBtn = document.getElementById('google-signup-btn');

  console.log("Elementos encontrados:", {
    loginModal: !!loginModal,
    signupModal: !!signupModal,
    openLoginBtns: openLoginBtns.length,
    openSignupBtns: openSignupBtns.length,
    closeLoginBtn: !!closeLoginBtn,
    closeSignupBtn: !!closeSignupBtn
  });

  // Abrir modal de login (desde cualquier botón)
  openLoginBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      console.log("Abriendo modal de login");
      if (loginModal) {
        loginModal.style.display = 'flex';
        loginModal.classList.add('is-active');
      }
    });
  });

  // Abrir modal de registro (desde cualquier botón)
  openSignupBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      console.log("Abriendo modal de registro");
      if (signupModal) {
        signupModal.style.display = 'flex';
        signupModal.classList.add('is-active');
      }
    });
  });

  // Cerrar modales
  if (closeLoginBtn && loginModal) {
    closeLoginBtn.addEventListener('click', () => {
      loginModal.classList.remove('is-active');
      loginModal.style.display = 'none';
    });
  }

  if (closeSignupBtn && signupModal) {
    closeSignupBtn.addEventListener('click', () => {
      signupModal.classList.remove('is-active');
      signupModal.style.display = 'none';
    });
  }

  // Cambiar entre modales
  if (switchToSignupBtn) {
    switchToSignupBtn.addEventListener('click', () => {
      switchModal('login-modal', 'signup-modal');
    });
  }

  if (switchToLoginBtn) {
    switchToLoginBtn.addEventListener('click', () => {
      switchModal('signup-modal', 'login-modal');
    });
  }

  // Cerrar modales al hacer clic fuera
  if (loginModal) {
    loginModal.addEventListener('click', (e) => {
      if (e.target === loginModal) {
        loginModal.classList.remove('is-active');
        loginModal.style.display = 'none';
      }
    });
  }

  if (signupModal) {
    signupModal.addEventListener('click', (e) => {
      if (e.target === signupModal) {
        signupModal.classList.remove('is-active');
        signupModal.style.display = 'none';
      }
    });
  }

  // Formularios
  if (loginForm) {
    loginForm.addEventListener('submit', loginHandler);
  }

  if (signupForm) {
    signupForm.addEventListener('submit', signupHandler);
  }

  // Botones de Google
  if (googleLoginBtn) {
    googleLoginBtn.addEventListener('click', googleSignInHandler);
  }

  if (googleSignupBtn) {
    googleSignupBtn.addEventListener('click', googleSignInHandler);
  }
  
  console.log("Event listeners configurados correctamente");
};

// Función para verificar si el DOM está listo
const waitForDOM = () => {
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeModals);
  } else {
    // DOM ya está cargado
    initializeModals();
  }
};

// Inicializar cuando el script se carga
waitForDOM();

// También intentar inicializar después de un pequeño delay para asegurar que todo esté listo
setTimeout(() => {
  if (document.querySelectorAll('#open-login-modal').length > 0) {
    console.log("Re-inicializando modales después del timeout");
    initializeModals();
  }
}, 100);
</script>

<style>
    .glass-effect {
        backdrop-filter: blur(10px);
        background: rgba(93, 91, 89, 0.85);
    }
    
    .input-field {
        background: transparent;
        border: none;
        border-bottom: 1px solid rgba(255, 255, 255, 0.3);
        outline: none;
        transition: border-color 0.3s ease;
    }
    
    .input-field:focus {
        border-bottom-color: rgba(255, 255, 255, 0.6);
    }
    
    .input-field::placeholder {
        color: rgba(255, 255, 255, 0.6);
    }
    
    .google-btn {
        background: white;
        color: #374151;
        border: none;
        transition: all 0.3s ease;
    }
    
    .google-btn:hover {
        background: #f9fafb;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }
    
    .sign-in-btn {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        transition: all 0.3s ease;
    }
    
    .sign-in-btn:hover {
        background: rgba(255, 255, 255, 0.2);
        border-color: rgba(255, 255, 255, 0.3);
    }

    /* Modal styles */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.7);
        display: none;
        align-items: center;
        justify-content: center;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;
        z-index: 1000;
    }

    .modal-overlay.is-active {
        opacity: 1;
        visibility: visible;
    }

    .modal-content {
        transform: scale(0.9);
        transition: transform 0.3s ease;
    }

    .modal-overlay.is-active .modal-content {
        transform: scale(1);
    }
</style>